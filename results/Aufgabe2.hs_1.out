Punkte pro Testfall: 5; 0; Maximum: 25 

Testfall: {-1.1-}[facLst i|i<-[-1..5]] == [[],[1],[1,1],[1,1,2],[1,1,2,6],[1,1,2,6,24],[1,1,2,6,24,120]]; Testfall OK 
Testfall: {-1.2-}[factsL i|i<-[-1..5]] == [[],[1],[1,1],[2,1,1],[6,2,1,1],[24,6,2,1,1],[120,24,6,2,1,1]]; Testfall OK 
Testfall: {-1.3-}factsL (-5) == []; Testfall OK 
Testfall: {-1.4-}(take 6.facLst) 100 == [1,1,2,6,24,120]; Testfall OK 
Testfall: {-1.5-}let n=99;in zipWith(div)((tail.facLst)(n+1))(facLst n) == [1..n+1]; Testfall OK 

Testfaelle OK: 5; Testfaelle FALSCH: 0
Punkte : 25

Punkte pro Testfall: 8; 0; Maximum: 24 

Testfall: {-2.1-}extractNumerals "a123a0" == ["123","0"]; Testfall OK 
Testfall: {-2.2-} drop 9(extractNumerals(map(\x->if x=='0' then 'a' else x)(show(3^3^5)))) == ["967","937234399434755499","6831683116791","55225665627"]; Testfall OK 
Testfall: {-2.3-}[last(extractNumerals(map(\x->if x=='0' then 'a' else x)(show(3^i^4))))|i<-[2..6]] == ["46721","3","548899435521","85443","321"]; Testfall OK 

Testfaelle OK: 3; Testfaelle FALSCH: 0
Punkte : 24

Punkte pro Testfall: 7; 0; Maximum: 26 

Testfall: [i|i<-[-1..9],(True,_)<-[isPowOf2 i]] == [1,2,4,8]; Testfall OK 
Testfall: [n|i<-[-5..32],(True,n)<-[isPowOf2 i]] == [0..5]; Testfall OK 
Testfall: [n|i<-[-9..256],(True,n)<-[isPowOf2 i],2^n/=i] == []; Testfall OK 
Testfall: sL2pO2 ["32","007"] == [5,-1]; Testfall OK 

Testfaelle OK: 4; Testfaelle FALSCH: 0
Punkte : 26

Punkte pro Testfall: 5; 0; Maximum: 25 

Testfall: {-4.1-}let c=curry3;u=uncurry3;in 1 == 1; Testfall OK 
Testfall: {-4.2-}let f(a,b,c)=(a+2*b+3*c); in curry3 f 1 1 1 == 6; Testfall OK 
Testfall: {-4.3-}let f(a,b,c)=(a+2*b+3*c); in (curry3.uncurry3.curry3)f 3 2 1 == 10; Testfall OK 
Testfall: {-4.4-}let g a b c=(a+2*b+3*c); in (uncurry3.curry3.uncurry3)g(3,2,1) == 10; Testfall OK 
Testfall: {-4.5-}let g a b c=a++b++c; in (uncurry3.curry3.uncurry3)g("a","b","c") == "abc"; Testfall OK 

Testfaelle OK: 5; Testfaelle FALSCH: 0
Punkte : 25

Punkte gesamt: 100

